{"version":3,"sources":["Sidebar.js","Projection.js","About.js","Content.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","this","props","setSidebarCanvas","side_canvas","_this","_this$props","sidebar_orientation","sidebar_image_size","grem","p","hover_index","mnist_labels","color_array","react_default","a","createElement","style","display","flexDirection","justifyContent","flexGrow","ref","width","height","background","concat","join","color","padding","transition","onClick","toggleAbout","Component","mnist_tile_locations","Object","toConsumableArray","Array","map","n","i","process","mnist_images","src","img","document","Projection","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","position","z","d3_x","x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","state","init","bind","assertThisInitialized","addPoints","setUpCamera","animate","getZFromScale","rvFOV","THREE","degToRad","fov","Math","tan","camera_z_position","fov_height","d3_transform","k","set","new_size","input","scale1","domain","range","clamp","scale2","zoomScaler","point_group","scene","children","c","length","material","uniforms","size","value","camera_z_start","mnist_embeddings","vFOV","xs","e","min_x","_","max_x","ys","min_y","max_y","data_aspect","max_x_from_center","m","abs","max_y_from_center","far","scaleExtent","on","zoomHandler","initial_scale","initial_transform","_this$props2","ranges","start","sprite_side","end","sprite_number","push","embedding_chunks","slice","label_chunks","loader","textures","l","t","load","flipY","magFilter","echunk","lchunk","vertices","v","embedding","vert","geometry","numVertices","positions","Float32Array","offsets","colors","addAttribute","attributes","copyVector3sArray","index","floor","texture","repeat","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","hover_container","point","frustumCulled","visible","digit_index","full_index","needsUpdate","offset","array","highlight_container","highlights","remove","apply","mouse_position","_this$props3","sidebar_ctx","mouse_vector","_ref","_ref2","slicedToArray","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","object","setHoverIndex","highlightPoint","fillRect","drawImage","_this2","domElement","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props4","setClearColor","appendChild","addBlankHighlightPoints","handleMouse","requestAnimationFrame","render","_this$props5","prevProps","_this$props6","removeChild","_this3","_this$props7","overflow","About","left","top","right","bottom","paddingTop","overflowY","fontSize","lineHeight","className","textAlign","cursor","textDecoration","maxWidth","margin","dist_default","tb","lr","Layout","ww","wh","sidebar_height","show_about","checkHash","setState","window","innerWidth","innerHeight","sidebar_mount","offsetHeight","imageSmoothingEnabled","canvas","ctx","getContext","history","pushState","location","pathname","hash","addEventListener","removeEventListener","_this$state","sidebar_style","main_style","font_size","objectSpread","scaler","general_style","src_Sidebar","src_Projection","src_About","Data","fetch","then","response","json","src_Layout","App","src_Data","Boolean","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAqFeA,8LAjFXC,KAAKC,MAAMC,iBAAiBF,KAAKG,8CAG1B,IAAAC,EAAAJ,KAAAK,EASHL,KAAKC,MAPPK,EAFKD,EAELC,oBACAC,EAHKF,EAGLE,mBACAC,EAJKH,EAILG,KACAC,EALKJ,EAKLI,EACAC,EANKL,EAMLK,YACAC,EAPKN,EAOLM,aACAC,EARKP,EAQLO,YAEF,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,SAAU,IAGZP,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,cAC0B,eAAxBZ,EAAuC,MAAQ,WAGnDO,EAAAC,EAAAC,cAAA,UACEM,IAAK,SAAAlB,GACHC,EAAKD,YAAcA,GAErBmB,MAAOf,EACPgB,OAAQhB,IAEVM,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEI,SAAU,IACtBP,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLQ,WAAYd,EAAW,OAAAe,OACZb,EAAYD,EAAaD,IAAcgB,KAAK,KADhC,KAEnB,cACJC,MAAOjB,EAAc,OAAS,OAC9BkB,QAASnB,EAAED,EAAO,EAAGA,EAAO,GAC5BS,QAAS,OACTE,eAAgB,gBAChBU,WAAY,oBAGdhB,EAAAC,EAAAC,cAAA,qBACCL,EAAcG,EAAAC,EAAAC,cAAA,WAAMJ,EAAaD,IAAsB,MAE1DG,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLY,QAASnB,EAAED,EAAO,EAAGA,EAAO,GAC5BS,QAAS,OACTE,eAAgB,kBAJpB,SAQGT,EAAcG,EAAAC,EAAAC,cAAA,WAAML,GAAqB,QAIhDG,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAASpB,EAAO,IAC5BK,EAAAC,EAAAC,cAAA,sEAC2D,IACzDF,EAAAC,EAAAC,cAAA,UACEe,QAAS,WACP1B,EAAKH,MAAM8B,aAAY,KAF3B,mBArEUC,mDCYlBC,EAAuBC,OAAAC,EAAA,EAAAD,CAAIE,MANX,KAMiCC,IACnD,SAACC,EAAGC,GAAJ,SAAAd,OAAae,iBAAb,KAAAf,OAFsB,qBAEtBA,OAA2Dc,EAA3D,UAGEE,EAAeR,EAAqBI,IAAI,SAAAK,GAC1C,IAAIC,EAAMC,SAAS7B,cAAc,OAEjC,OADA4B,EAAID,IAAMA,EACHC,IA8cME,cAvbb,SAAAA,EAAY5C,GAAO,IAAAG,EAAA,OAAA8B,OAAAY,EAAA,EAAAZ,CAAAlC,KAAA6C,IACjBzC,EAAA8B,OAAAa,EAAA,EAAAb,CAAAlC,KAAAkC,OAAAc,EAAA,EAAAd,CAAAW,GAAAI,KAAAjD,KAAMC,KA0BRiD,aAAe,SAAC5B,EAAOC,GACrBnB,EAAK+C,OAAOC,OAAS9B,EAAQC,EAC7BnB,EAAK+C,OAAOE,yBACZjD,EAAKkD,SAASC,QAAQjC,EAAOC,GAC7B,IAAIiC,EAAgBpD,EAAKqD,cAAcrD,EAAK+C,OAAOO,SAASC,GACxDC,GAASxD,EAAK+C,OAAOO,SAASG,EAAIL,EAAiBpD,EAAKH,MAAMqB,MAAQ,EACtEwC,EAAO1D,EAAK+C,OAAOO,SAASK,EAAIP,EAAgBpD,EAAKH,MAAMsB,OAAS,EACpEyC,EAAmBC,IACpBC,UAAUN,EAAME,GAChBK,MAAMX,GACLY,EAAOH,IAAU7D,EAAKiE,OAC1BjE,EAAKkE,QAAQC,UAAUH,EAAMJ,IApC7B5D,EAAKoE,MAAQ,GACbpE,EAAKqE,KAAOrE,EAAKqE,KAAKC,KAAVxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACZA,EAAKwE,UAAYxE,EAAKwE,UAAUF,KAAfxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACjBA,EAAK8C,aAAe9C,EAAK8C,aAAawB,KAAlBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACpBA,EAAKyE,YAAczE,EAAKyE,YAAYH,KAAjBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACnBA,EAAK0E,QAAU1E,EAAK0E,QAAQJ,KAAbxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACfA,EAAKqD,cAAgBrD,EAAKqD,cAAciB,KAAnBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACrBA,EAAK2E,cAAgB3E,EAAK2E,cAAcL,KAAnBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KATJA,6EAYL+D,GACZ,IAAIa,EAAQC,IAAWC,SAASlF,KAAKmD,OAAOgC,KAG5C,OAFmBnF,KAAKC,MAAMsB,OAAS4C,GACC,EAAIiB,KAAKC,IAAIL,EAAQ,0CAIjDM,GACZ,IAAIN,EAAQC,IAAWC,SAASlF,KAAKmD,OAAOgC,KAExCI,EAA+B,GADbH,KAAKC,IAAIL,EAAQ,GAAKM,GAG5C,OADYtF,KAAKC,MAAMsB,OAASgE,wCAmBhC,IAAIC,EAAevB,IAASM,UAExBJ,EAAQqB,EAAaC,EACrB5B,IAAM2B,EAAa3B,EAAI7D,KAAKC,MAAMqB,MAAQ,GAAK6C,EAC/CJ,GAAKyB,EAAazB,EAAI/D,KAAKC,MAAMsB,OAAS,GAAK4C,EAC/CR,EAAI3D,KAAK+E,cAAcZ,GAE3BnE,KAAKmD,OAAOO,SAASgC,IAAI7B,EAAGE,EAAGJ,GAK/B,IAFA,IAAIgC,EAxES,SAAAC,GACf,IAAIC,EAAS5B,MAEV6B,OAAO,CAAC,GAAI,IACZC,MAAM,CAAC,GAAI,KACXC,OAAM,GACLC,EAAShC,MAEV6B,OAAO,CAAC,EAAG,KACXC,MAAM,CAAC,GAAI,KACd,OAAIH,GAAS,EACJC,EAAOD,GACLA,GAAS,EACXK,EAAOL,GAEP,GAyDQM,CAAWvC,GACtBwC,EAAcnG,KAAKoG,MAAMC,SAAS,GAAGA,SAChCC,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IACtCH,EAAYG,GAAGE,SAASC,SAASC,KAAKC,MAAQhB,wCAIpC,IAoBRiB,EApBQvG,EAC8BL,KAAKC,MAAzCqB,EADMjB,EACNiB,MAAOC,EADDlB,EACCkB,OAAQsF,EADTxG,EACSwG,iBAEjBzD,EAASpD,KAAKmD,OAAOC,OACrB0D,EAAO9G,KAAKmD,OAAOgC,IACnBH,EAAQC,IAAWC,SAAS4B,GAE5BC,EAAKF,EAAiBxE,IAAI,SAAA2E,GAAC,OAAIA,EAAE,KACjCC,EAAQC,MAAMH,GACdI,EAAQD,MAAMH,GACdK,EAAKP,EAAiBxE,IAAI,SAAA2E,GAAC,OAAIA,EAAE,KACjCK,EAAQH,MAAME,GACdE,EAAQJ,MAAME,GAGdG,GAFaJ,EAAQF,IACPK,EAAQD,GAGtBG,EAAoBN,MAAM,CAACD,EAAOE,GAAO9E,IAAI,SAAAoF,GAAC,OAAIrC,KAAKsC,IAAID,MAC3DE,EAAoBT,MAAM,CAACG,EAAOC,GAAOjF,IAAI,SAAAoF,GAAC,OAAIrC,KAAKsC,IAAID,MAW3DG,EAAuB,MANzBhB,EAFEW,EAAcnE,EAECoE,EAAoBpC,KAAKC,IAAIL,EAAQ,GAAK5B,EAG1CuE,EAAoBvC,KAAKC,IAAIL,EAAQ,IAIxDhF,KAAKmD,OAAOyE,IAAMA,EAClB5H,KAAKmD,OAAOO,SAASC,EAAqB,IAAjBiD,EAGzB5G,KAAKsE,QAAUL,MAEZ4D,YAAY,CAAC7H,KAAKyD,cAAcmE,EAAM,GAAI5H,KAAKyD,cAAc,MAC7DqE,GAAG,OAAQ9H,KAAK+H,YAAYrD,KAAK1E,OAEpC,IAAIoE,EAAOH,IAAUjE,KAAKqE,OAC1BrE,KAAKoE,KAAOA,EACZA,EAAKnB,KAAKjD,KAAKsE,SAASwD,GAAG,gBAAiB,MAC5C,IAAIE,EAAgBhI,KAAKyD,cAAczD,KAAKmD,OAAOO,SAASC,GACxDsE,EAAoBhE,IACrBC,UAAU5C,EAAQ,EAAGC,EAAS,GAC9B4C,MAAM6D,GACThI,KAAKsE,QAAQC,UAAUH,EAAM6D,uCAQ7B,IALU,IAAAC,EAC4ClI,KAAKC,MAArD4G,EADIqB,EACJrB,iBAAkBlG,EADduH,EACcvH,aAAcC,EAD5BsH,EAC4BtH,YAGlCuH,EAAS,GACJ5F,EAAI,EAAGA,EArJA,GAqJmBA,IAAK,CACtC,IAAI6F,EAvJQC,KAuJA9F,EACR+F,EAxJQD,MAwJD9F,EAAI,GACLgG,KAANhG,IAAyB+F,EAAMC,OACnCJ,EAAOK,KAAK,CAACJ,EAAOE,IAEtB,IAAIG,EAAmBN,EAAO9F,IAAI,SAAA0D,GAAK,OACrCc,EAAiB6B,MAAM3C,EAAM,GAAIA,EAAM,MAErC4C,EAAeR,EAAO9F,IAAI,SAAA0D,GAAK,OACjCpF,EAAa+H,MAAM3C,EAAM,GAAIA,EAAM,MAIjC6C,EAAS,IAAI3D,IACjBjF,KAAK6I,SAAW5G,EAAqBI,IAAI,SAAAyG,GACvC,IAAIC,EAAIH,EAAOI,KAAKF,GAIpB,OAHAC,EAAEE,OAAQ,EACVF,EAAEG,UAAYjE,IAEP8D,IAIT,IADA,IAAI5C,EAAc,IAAIlB,IACbqB,EAAI,EAAGA,EA7KA,GA6KmBA,IAAK,CAKtC,IAJA,IAAI6C,EAASV,EAAiBnC,GAC1B8C,EAAST,EAAarC,GAEtB+C,EAAW,GACNC,EAAI,EAAGA,EAAIH,EAAO5C,OAAQ+C,IAAK,CACtC,IAAIC,EAAYJ,EAAOG,GACnBE,EAAO,IAAIvE,IAAcsE,EAAU,GAAIA,EAAU,GAAI,GACzDF,EAASC,GAAKE,EAGhB,IAAIC,EAAW,IAAIxE,IAEfyE,EAAcL,EAAS9C,OACvBoD,EAAY,IAAIC,aAA2B,EAAdF,GAC7BG,EAAU,IAAID,aAA2B,EAAdF,GAC3BI,EAAS,IAAIF,aAA2B,EAAdF,GAC9BD,EAASM,aAAa,WAAY,IAAI9E,IAAsB0E,EAAW,IACvEF,EAASM,aAAa,SAAU,IAAI9E,IAAsB4E,EAAS,IACnEJ,EAASM,aAAa,QAAS,IAAI9E,IAAsB6E,EAAQ,IACjEL,EAASO,WAAWtG,SAASuG,kBAAkBZ,GAI/C,IAFA,IAES9G,EAAI,EAAG2H,EAAQ,EAAGpB,EAAIY,EAAanH,EAAIuG,EAAGvG,IAAK2H,GAAS,EAAG,CAClE,IAAIrG,EAAMtB,EAxMA,GAGM,GAEC,KAoMbwB,EAtMY,GAuMbqB,KAAK+E,MAAM5H,EA1MJ,IAKO,KAsMjBsH,EAAQK,GAASrG,EACjBgG,EAAQK,EAAQ,GAAKnG,EAGvB,IAAK,IAAIxB,EAAI,EAAG2H,EAAQ,EAAGpB,EAAIY,EAAanH,EAAIuG,EAAGvG,IAAK2H,GAAS,EAAG,CAClE,IAAIvI,EAAQf,EAAYwI,EAAO7G,IAC/BuH,EAAOI,GAASvI,EAAM,GAAK,IAC3BmI,EAAOI,EAAQ,GAAKvI,EAAM,GAAK,IAC/BmI,EAAOI,EAAQ,GAAKvI,EAAM,GAAK,IAIjC,IAAI8E,EAAW,CACb2D,QAAS,CAAEzD,MAAO3G,KAAK6I,SAASvC,IAChC+D,OAAQ,CAAE1D,MAAO,IAAI1B,IApBD,EArMV,GAqMU,EArMV,KA0NVyB,KAAM,CAAEC,MAvNQ,KAoPdH,EAAW,IAAIvB,IAAqB,CACtCwB,SAAUA,EACV6D,aA5Be,2WA6BfC,eAhBiB,kYAoBfC,EAAc,IAAIvF,IAAawE,EAAUjD,GAC7CgE,EAAYC,SAAW,CAAEC,aAAcpE,GAEvCH,EAAYwE,IAAIH,GAGlBxK,KAAKoG,MAAMuE,IAAIxE,qDAIf,IAAIyE,EAAkB,IAAI3F,IAC1BjF,KAAKoG,MAAMuE,IAAIC,GAEf,IACIvB,EAAW,CADJ,IAAIpE,IAAc,EAAG,EAAG,IAE/BwE,EAAW,IAAIxE,IACfyE,EAAcL,EAAS9C,OACvBoD,EAAY,IAAIC,aAA2B,EAAdF,GAC7BG,EAAU,IAAID,aAA2B,EAAdF,GAC/BD,EAASM,aAAa,WAAY,IAAI9E,IAAsB0E,EAAW,IACvEF,EAASM,aAAa,SAAU,IAAI9E,IAAsB4E,EAAS,IAGnE,IAGIpD,EAAW,CACb2D,QAAS,CAAEzD,MAAO3G,KAAK6I,SAAS,IAChCwB,OAAQ,CAAE1D,MAAO,IAAI1B,IALD,EArRR,GAqRQ,EArRR,KA2RZyB,KAAM,CAAEC,MAAO,KAyBbH,EAAW,IAAIvB,IAAqB,CACtCwB,SAAUA,EACV6D,aAxBe,mRAyBfC,eAfiB,gVAkBfM,EAAQ,IAAI5F,IAAawE,EAAUjD,GACvCqE,EAAMC,eAAgB,EAEtB9K,KAAKoG,MAAMC,SAAS,GAAG0E,SAAU,EACjC/K,KAAKoG,MAAMC,SAAS,GAAGsE,IAAIE,0CAGdH,EAAcM,EAAaC,GACxC,IAAIJ,EAAQ7K,KAAKoG,MAAMC,SAAS,GAAGA,SAAS,GAExCkD,EAAYvJ,KAAKC,MAAM4G,iBAAiBoE,GAGxC5B,EAAW,CADJ,IAAIpE,IAAcsE,EAAU,GAAIA,EAAU,GAAI,IAGrDM,EAAU,IAAID,aAAa,GAE3B/F,EAAMmH,EA3UI,GA2UyB,GAAM,KACzCjH,EAA6C,GAAxCqB,KAAK+E,MAAMa,EA5UN,IA4UyC,KACvDnB,EAAQ,GAAKhG,EACbgG,EAAQ,GAAK9F,EAEb8G,EAAMpB,SAASO,WAAWtG,SAASuG,kBAAkBZ,GACrDwB,EAAMpB,SAASO,WAAWtG,SAASwH,aAAc,EACjDL,EAAMpB,SAASO,WAAWmB,OAAOC,MAAQvB,EACzCgB,EAAMpB,SAASO,WAAWmB,OAAOD,aAAc,EAG/CL,EAAMrE,SAASC,SAAS2D,QAAQzD,MAAQ3G,KAAK6I,SAAS6B,8CAItD,IAAIW,EAAsBrL,KAAKoG,MAAMC,SAAS,GAC1CiF,EAAaD,EAAoBhF,SACrCgF,EAAoBE,OAApBC,MAAAH,EAAmBnJ,OAAAC,EAAA,EAAAD,CAAWoJ,4CAGhBG,GAAgB,IAAAC,EAC2B1L,KAAKC,MAAxDqB,EADwBoK,EACxBpK,MAAOC,EADiBmK,EACjBnK,OAAQoK,EADSD,EACTC,YAAapL,EADJmL,EACInL,mBAclC,IAAIqL,EAZJ,SAAAC,GAAwC,IAAAC,EAAA5J,OAAA6J,EAAA,EAAA7J,CAAA2J,EAAA,GAAjBG,EAAiBF,EAAA,GAATG,EAASH,EAAA,GACtC,OAAO,IAAI7G,IACR+G,EAAS1K,EAAS,EAAI,GACrB2K,EAAS1K,EAAU,EAAI,EACzB,GAQe2K,CAAaT,GAChCzL,KAAKmM,UAAUC,cAAcR,EAAc5L,KAAKmD,QAChDnD,KAAKmM,UAAUE,OAAOC,OAAOC,UAAY,IACzC,IAAIC,EAAaxM,KAAKmM,UAAUM,iBAC9BzM,KAAKoG,MAAMC,SAAS,GAAGA,UAEzB,GAAImG,EAAW,GAAI,CACjB,IACIE,EAZN,SAAuCF,GACrC,OAAOtF,SAASsF,EAAY,iBAUJG,CAA8BH,GACpB,GAC9B9B,EAAegC,EAAUE,OAAOnC,SAASC,aACzCM,EAAc0B,EAAUxC,MACxBe,EAxXQ5C,KAwXKqC,EAA6BM,EAC9ChL,KAAKC,MAAM4M,cAAc5B,GACzBjL,KAAK8M,eAAepC,EAAcM,EAAaC,GAC/CjL,KAAKoG,MAAMC,SAAS,GAAG0E,SAAU,EAEjCY,EAAYoB,SAAS,EAAG,EAAGxM,EAAoBA,GAC/CoL,EAAYqB,UACVvK,EAAaiI,GAEZM,EAlYS,GAGM,MAgYhB5F,KAAK+E,MAAMa,EAnYD,IAGM,MAoYhB,EACA,EACAzK,EACAA,QAGFP,KAAKC,MAAM4M,cAAc,MACzB7M,KAAKoG,MAAMC,SAAS,GAAG0E,SAAU,EACjCY,EAAYoB,SAAS,EAAG,EAAGxM,EAAoBA,yCAIrC,IAAA0M,EAAAjN,KACRoE,EAAOH,IAAUjE,KAAKsD,SAAS4J,YAEnClN,KAAKmM,UAAY,IAAIlH,IAErBb,EAAK0D,GAAG,YAAa,WAAM,IAAAqF,EACFlJ,IAASG,EAAKgJ,QADZC,EAAAnL,OAAA6J,EAAA,EAAA7J,CAAAiL,EAAA,GAErB1B,EAAiB,CAFI4B,EAAA,GAAAA,EAAA,IAGzBJ,EAAKK,gBAAgB7B,oCAIlB,IAAA8B,EACmBvN,KAAKC,MAAvBqB,EADDiM,EACCjM,MAAOC,EADRgM,EACQhM,OAEbvB,KAAKoG,MAAQ,IAAInB,IAEjB,IACI7B,EAAS9B,EAAQC,EAIrBvB,KAAKmD,OAAS,IAAI8B,IALP,GAKqC7B,EAHrC,IACD,KAIVpD,KAAKsD,SAAW,IAAI2B,IACpBjF,KAAKsD,SAASkK,cAAc,QAAU,GACtCxN,KAAKsD,SAASC,QAAQjC,EAAOC,GAC7BvB,KAAKqE,MAAMoJ,YAAYzN,KAAKsD,SAAS4J,YAErClN,KAAK4E,YAEL5E,KAAK0N,0BAEL1N,KAAK6E,cAEL7E,KAAK8E,UAEL9E,KAAK2N,gDAILC,sBAAsB5N,KAAK8E,SAC3B9E,KAAKsD,SAASuK,OAAO7N,KAAKoG,MAAOpG,KAAKmD,oDAGpB,IAAA2K,EACM9N,KAAKC,MADX6N,EACZxM,MADYwM,EACLvM,OACbvB,KAAKyE,kDAGYsJ,GAAW,IAAAC,EACJhO,KAAKC,MAAvBqB,EADsB0M,EACtB1M,MAAOC,EADeyM,EACfzM,OACTD,IAAUyM,EAAUzM,OAASC,IAAWwM,EAAUxM,QACpDvB,KAAKkD,aAAa5B,EAAOC,kDAK3BvB,KAAKqE,MAAM4J,YAAYjO,KAAKsD,SAAS4J,6CAG9B,IAAAgB,EAAAlO,KAAAmO,EACiBnO,KAAKC,MAAvBqB,EADC6M,EACD7M,MAAOC,EADN4M,EACM5M,OACb,OACEV,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEM,MAAOA,EAAOC,OAAQA,EAAQ6M,SAAU,UACjD/M,IAAK,SAAAgD,GACH6J,EAAK7J,MAAQA,YAjbErC,8BC0BVqM,mLAhEJ,IAAAjO,EAAAJ,KAAAK,EACWL,KAAKC,MAAjBO,EADCH,EACDG,KADCH,EACKI,EACZ,OACEI,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACL0C,SAAU,QACV4K,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRjN,WAAY,OACZG,MAAO,OACP+M,WAAmB,EAAPlO,EACZmO,UAAW,OACXC,SAAU,GACVC,WAAY,MAGdhO,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLQ,WAAY,OACZkC,SAAU,QACV4K,KAAM,EACNC,IAAK,EACLC,MAAO,EACP5M,QAASpB,EAAO,IAPpB,QAWEK,EAAAC,EAAAC,cAAA,UACEe,QAAS,WACP1B,EAAKH,MAAM8B,aAAY,IAEzB+M,UAAU,YACV9N,MAAO,CACL0C,SAAU,WACV8K,MAAO,EACPD,IAAK,EACLhN,OAAe,EAAPf,EACRc,MAAc,EAAPd,EACPoB,QAASpB,EAAO,EAChBuO,UAAW,SACXC,OAAQ,UACRC,eAAgB,SAdpB,SAoBFpO,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLkO,SAAiB,GAAP1O,EACV2O,OAAQ,SACRvN,QAASpB,EAAO,EAChBmB,MAAO,SAGTd,EAAAC,EAAAC,cAACqO,EAAAtO,EAAD,KC9DW,w2QDIDkB,aEGpB,SAASvB,EAAE4O,EAAIC,GACb,SAAA7N,OAAU4N,EAAV,OAAA5N,OAAkB6N,EAAlB,MAGF,IAAI1O,EAAc,CAChB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,MA2LE2O,cAvLb,SAAAA,EAAYtP,GAAO,IAAAG,EAAA,OAAA8B,OAAAY,EAAA,EAAAZ,CAAAlC,KAAAuP,IACjBnP,EAAA8B,OAAAa,EAAA,EAAAb,CAAAlC,KAAAkC,OAAAc,EAAA,EAAAd,CAAAqN,GAAAtM,KAAAjD,KAAMC,KACDuE,MAAQ,CACXgL,GAAI,KACJC,GAAI,KACJC,eAAgB,KAChBhP,YAAa,KACbiP,WAAY,MAEdvP,EAAKuL,YAAc,KACnBvL,EAAKmD,QAAU2D,WAAW9G,EAAKmD,QAAQmB,KAAbxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KAAyB,KACnDA,EAAKwP,UAAYxP,EAAKwP,UAAUlL,KAAfxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACjBA,EAAKF,iBAAmBE,EAAKF,iBAAiBwE,KAAtBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KACxBA,EAAK2B,YAAc3B,EAAK2B,YAAY2C,KAAjBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAA9B,KAbFA,yEAiBjBJ,KAAK6P,SAAS,CAAEL,GAAIM,OAAOC,WAAYN,GAAIK,OAAOE,cAClD,IAAIN,EAAiB1P,KAAKiQ,cAAcC,aACxClQ,KAAK6P,SAAS,CAAEH,eAAgBA,IAC5B1P,KAAK2L,cAAa3L,KAAK2L,YAAYwE,uBAAwB,4CAGhDC,GACf,IAAIC,EAAMD,EAAOE,WAAW,MAC5BD,EAAIF,uBAAwB,EAC5BnQ,KAAK2L,YAAc0E,sCAGT7L,IACI,IAAVA,GACFsL,OAAOS,QAAQC,UAAU,KAAM,sBAAuB,UACtDxQ,KAAK6P,SAAS,CAAEF,YAAY,MACT,IAAVnL,IACTsL,OAAOS,QAAQC,UAAU,KAAM,gBAAiBV,OAAOW,SAASC,UAChE1Q,KAAK6P,SAAS,CAAEF,YAAY,2CAIlBjP,GACZV,KAAK6P,SAAS,CAAEnP,YAAaA,iDAI7BV,KAAKuD,UACLvD,KAAK4P,gDAIDE,OAAOW,SAASE,MAAiC,WAAzBb,OAAOW,SAASE,KAC1C3Q,KAAK6P,SAAS,CAAEF,YAAY,IAE5B3P,KAAK6P,SAAS,CAAEF,YAAY,gDAK9BG,OAAOc,iBAAiB,SAAU5Q,KAAKuD,SACvCuM,OAAOc,iBAAiB,WAAY5Q,KAAK4P,0DAIzCE,OAAOe,oBAAoB,SAAU7Q,KAAKuD,0CAGnC,IAwBHhD,EAAoBD,EAxBjB2M,EAAAjN,KAAAK,EACkCL,KAAKC,MAAxC4G,EADCxG,EACDwG,iBAAkBlG,EADjBN,EACiBM,aADjBmQ,EAEmD9Q,KAAKwE,MAAzDgL,EAFCsB,EAEDtB,GAAIC,EAFHqB,EAEGrB,GAAIC,EAFPoB,EAEOpB,eAAgBhP,EAFvBoQ,EAEuBpQ,YAAaiP,EAFpCmB,EAEoCnB,WACvChE,EAAc3L,KAAK2L,YAInBoF,EAAgB,CAClBrN,SAAU,WACV4K,KAAM,EACNC,IAAK,EACLhN,OAAQ,QACR6M,SAAU,OACV5M,WAAY,OACZP,QAAS,OACTC,cAAe,UAEb8P,EAAa,CACftN,SAAU,WACVnC,OAAQ,QACRC,WAAY,OACZ4M,SAAU,UAIR6C,EAAY,GAChB,GAAIzB,EAAK,IACPyB,EAAY,GACZF,EAAa7O,OAAAgP,EAAA,EAAAhP,CAAA,GACR6O,EADQ,CAEX7P,cAAe,MACfI,MAAO,OACPiN,IAAK,OACLhN,OAAQ,OACRkN,OAAQ,IAEVuC,EAAa,CAAE1P,MAAOkO,EAAIjO,OAAQkO,EAAKC,GACvCnP,EAhCgB,IAgCK0Q,EAA0B,EAC/C3Q,EAAsB,kBACjB,GAAIkP,EAAK,KAAW,CACzB,IAAI2B,EAAS,KAAsB3B,EAAK,KAAO,IAA5B,IACnByB,EAAY,IAAWzB,EAAK,KAAO,IAAlB,EAKjBjP,GAJAwQ,EAAa7O,OAAAgP,EAAA,EAAAhP,CAAA,GACR6O,EADQ,CAEXzP,MAAO6P,KAE0B7P,MACnC0P,EAAU9O,OAAAgP,EAAA,EAAAhP,CAAA,GACL8O,EADK,CAER1P,MAAOkO,EAAK2B,EACZ7C,KAAM6C,EACN5P,OAAQkO,IAEVnP,EAAsB,gBAEtByQ,EAAa7O,OAAAgP,EAAA,EAAAhP,CAAA,GACR6O,EADQ,CAEXzP,MAAO,MAET0P,EAAU9O,OAAAgP,EAAA,EAAAhP,CAAA,GACL8O,EADK,CAER1P,MAAOkO,EAAK,IACZlB,KAAM,IACN/M,OAAQkO,IAEVlP,EAAqBwQ,EAAczP,MACnChB,EAAsB,WAGxB,IAAIE,EAhEc,IAgEPyQ,EAEPG,EAAgB,CAClBxC,SAAUqC,EACVpC,WApEgB,KAuElB,OAAc,OAAPW,EACL3O,EAAAC,EAAAC,cAAA,OAAKC,MAAOoQ,GACVvQ,EAAAC,EAAAC,cAAA,OACEC,MAAO+P,EACP1P,IAAK,SAAA4O,GACHhD,EAAKgD,cAAgBA,IAGvBpP,EAAAC,EAAAC,cAACsQ,EAAD,CACE/Q,oBAAqBA,EACrBC,mBAAoBA,EACpBC,KAAMA,EACNC,EAAGA,EACHG,YAAaA,EACbV,iBAAkBF,KAAKE,iBACvBQ,YAAaA,EACbC,aAAcA,EACdoB,YAAa/B,KAAK+B,eAGtBlB,EAAAC,EAAAC,cAAA,OAAKC,MAAOgQ,GACVnQ,EAAAC,EAAAC,cAACuQ,EAAD,CACEhQ,MAAO0P,EAAW1P,MAClBC,OAAQyP,EAAWzP,OACnBsF,iBAAkBA,EAClBlG,aAAcA,EACdC,YAAaA,EACb+K,YAAaA,EACbpL,mBAAoBA,EACpBsM,cAAe7M,KAAK6M,cAAcnI,KAAK1E,SAG1C2P,EACC9O,EAAAC,EAAAC,cAACwQ,EAAD,CAAO/Q,KAAMA,EAAMC,EAAGA,EAAGsB,YAAa/B,KAAK+B,cACzC,MAGNlB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAAS,SAAvB,4BAnLeI,aCcNwP,cAlCb,SAAAA,EAAYvR,GAAO,IAAAG,EAAA,OAAA8B,OAAAY,EAAA,EAAAZ,CAAAlC,KAAAwR,IACjBpR,EAAA8B,OAAAa,EAAA,EAAAb,CAAAlC,KAAAkC,OAAAc,EAAA,EAAAd,CAAAsP,GAAAvO,KAAAjD,KAAMC,KACDuE,MAAQ,CACXqC,iBAAkB,KAClBlG,aAAc,MAJCP,mFAQC,IAAA6M,EAAAjN,KAClByR,MAAK,GAAAhQ,OAAIe,iBAAJ,2BACFkP,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAA7K,GAAgB,OACpBoG,EAAK4C,SAAS,CACZhJ,iBAAkBA,MAGxB4K,MAAK,GAAAhQ,OAAIe,iBAAJ,uBACFkP,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAA/Q,GAAY,OAChBsM,EAAK4C,SAAS,CACZlP,aAAcA,uCAMpB,OAAOX,KAAKwE,MAAMqC,kBAAoB7G,KAAKwE,MAAM7D,aAC/CE,EAAAC,EAAAC,cAAC8Q,EAAW7R,KAAKwE,OAEjB3D,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEY,QAAS,SAAvB,0BA9BaI,aCOJ8P,mLAJX,OAAOjR,EAAAC,EAAAC,cAACgR,EAAD,aAFO/P,aCQEgQ,QACW,cAA7BlC,OAAOW,SAASwB,UAEe,UAA7BnC,OAAOW,SAASwB,UAEhBnC,OAAOW,SAASwB,SAASC,MACvB,2DCZNC,IAAStE,OAAOhN,EAAAC,EAAAC,cAACqR,EAAD,MAASxP,SAASyP,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.c6e5c015.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Sidebar extends Component {\n  componentDidMount() {\n    this.props.setSidebarCanvas(this.side_canvas)\n  }\n\n  render() {\n    let {\n      sidebar_orientation,\n      sidebar_image_size,\n      grem,\n      p,\n      hover_index,\n      mnist_labels,\n      color_array,\n    } = this.props\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          flexGrow: 1,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection:\n              sidebar_orientation === 'horizontal' ? 'row' : 'column',\n          }}\n        >\n          <canvas\n            ref={side_canvas => {\n              this.side_canvas = side_canvas\n            }}\n            width={sidebar_image_size}\n            height={sidebar_image_size}\n          />\n          <div style={{ flexGrow: 1 }}>\n            <div\n              style={{\n                background: hover_index\n                  ? `rgb(${color_array[mnist_labels[hover_index]].join(',')})`\n                  : 'transparent',\n                color: hover_index ? '#000' : '#fff',\n                padding: p(grem / 4, grem / 2),\n                display: 'flex',\n                justifyContent: 'space-between',\n                transition: 'all 0.1s linear',\n              }}\n            >\n              <div>Label:</div>\n              {hover_index ? <div>{mnist_labels[hover_index]}</div> : null}\n            </div>\n            <div\n              style={{\n                padding: p(grem / 4, grem / 2),\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              Index:\n              {hover_index ? <div>{hover_index}</div> : null}\n            </div>\n          </div>\n        </div>\n        <div style={{ padding: grem / 2 }}>\n          <div>\n            An interactive UMAP visualization of the MNIST data set.{' '}\n            <button\n              onClick={() => {\n                this.props.toggleAbout(true)\n              }}\n            >\n              About\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\n// Constants for sprite sheets\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 14\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_tile_solid_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet zoomScaler = input => {\n  let scale1 = d3\n    .scaleLinear()\n    .domain([10, 5])\n    .range([14, 28])\n    .clamp(true)\n  let scale2 = d3\n    .scaleLinear()\n    .domain([2, 0.1])\n    .range([28, 56])\n  if (input >= 5) {\n    return scale1(input)\n  } else if (input <= 2) {\n    return scale2(input)\n  } else {\n    return 28\n  }\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setUpCamera = this.setUpCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  handleResize = (width, height) => {\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(width, height)\n    let current_scale = this.getScaleFromZ(this.camera.position.z)\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale)\n    let view = d3.select(this.mount)\n    this.d3_zoom.transform(view, resize_transform)\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    let new_size = zoomScaler(z)\n    let point_group = this.scene.children[0].children\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size\n    }\n  }\n\n  setUpCamera() {\n    let { width, height, mnist_embeddings } = this.props\n\n    let aspect = this.camera.aspect\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = mnist_embeddings.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = mnist_embeddings.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n    let data_width = max_x - min_x\n    let data_height = max_y - min_y\n    let data_aspect = data_width / data_height\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let camera_z_start\n    if (data_aspect > aspect) {\n      // console.log(\"width is limiter\");\n      camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    } else {\n      // console.log(\"height is limiter\");\n      camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    }\n\n    let far = camera_z_start * 1.25\n    this.camera.far = far\n    this.camera.position.z = camera_z_start * 1.1\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom).on('dblclick.zoom', null)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  addPoints() {\n    let { mnist_embeddings, mnist_labels, color_array } = this.props\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n    let embedding_chunks = ranges.map(range =>\n      mnist_embeddings.slice(range[0], range[1])\n    )\n    let label_chunks = ranges.map(range =>\n      mnist_labels.slice(range[0], range[1])\n    )\n\n    // load the textures\n    let loader = new THREE.TextureLoader()\n    this.textures = mnist_tile_locations.map(l => {\n      let t = loader.load(l)\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\n      return t\n    })\n\n    let point_group = new THREE.Group()\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n      let lchunk = label_chunks[c]\n\n      let vertices = []\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v]\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n        vertices[v] = vert\n      }\n\n      let geometry = new THREE.BufferGeometry()\n\n      let numVertices = vertices.length\n      let positions = new Float32Array(numVertices * 3)\n      let offsets = new Float32Array(numVertices * 2)\n      let colors = new Float32Array(numVertices * 3)\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / sprite_side\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let color = color_array[lchunk[i]]\n        colors[index] = color[0] / 255\n        colors[index + 1] = color[1] / 255\n        colors[index + 2] = color[2] / 255\n      }\n\n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: sprite_image_size },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material)\n      point_cloud.userData = { sprite_index: c }\n\n      point_group.add(point_cloud)\n    }\n\n    this.scene.add(point_group)\n  }\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group()\n    this.scene.add(hover_container)\n\n    let vert = new THREE.Vector3(0, 0, 0)\n    let vertices = [vert]\n    let geometry = new THREE.BufferGeometry()\n    let numVertices = vertices.length\n    var positions = new Float32Array(numVertices * 3) // 3 coordinates per point\n    var offsets = new Float32Array(numVertices * 2) // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / sprite_side\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 56.0 },\n    }\n\n    let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n    let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          gl_FragColor = tex;\n        }`\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n    })\n\n    let point = new THREE.Points(geometry, material)\n    point.frustumCulled = false\n\n    this.scene.children[1].visible = false\n    this.scene.children[1].add(point)\n  }\n\n  highlightPoint(sprite_index, digit_index, full_index) {\n    let point = this.scene.children[1].children[0]\n\n    let embedding = this.props.mnist_embeddings[full_index]\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n    let vertices = [vert]\n\n    var offsets = new Float32Array(2) // 2 coordinates per point\n\n    let x = ((digit_index % sprite_side) * 28) / 2048\n    let y = (Math.floor(digit_index / sprite_side) * 28) / 2048\n    offsets[0] = x\n    offsets[1] = y\n\n    point.geometry.attributes.position.copyVector3sArray(vertices)\n    point.geometry.attributes.position.needsUpdate = true // required after the first render\n    point.geometry.attributes.offset.array = offsets\n    point.geometry.attributes.offset.needsUpdate = true // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index]\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1]\n    let highlights = highlight_container.children\n    highlight_container.remove(...highlights)\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    )\n    if (intersects[0]) {\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n      let intersect = sorted_intersects[0]\n      let sprite_index = intersect.object.userData.sprite_index\n      let digit_index = intersect.index\n      let full_index = sprite_index * sprite_size + digit_index\n      this.props.setHoverIndex(full_index)\n      this.highlightPoint(sprite_index, digit_index, full_index)\n      this.scene.children[1].visible = true\n\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n      sidebar_ctx.drawImage(\n        mnist_images[sprite_index],\n        // source rectangle\n        (digit_index % sprite_side) * sprite_image_size,\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\n        sprite_image_size,\n        sprite_image_size,\n        // destination rectangle\n        0,\n        0,\n        sidebar_image_size,\n        sidebar_image_size\n      )\n    } else {\n      this.props.setHoverIndex(null)\n      this.scene.children[1].visible = false\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    this.addPoints()\n\n    this.addBlankHighlightPoints()\n\n    this.setUpCamera()\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    let { width, height } = this.props\n    this.init()\n  }\n\n  componentDidUpdate(prevProps) {\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height)\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height } = this.props\n    return (\n      <div\n        style={{ width: width, height: height, overflow: 'hidden' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Markdown from 'react-remarkable'\nimport { about_text } from './Content'\n\nclass About extends Component {\n  render() {\n    let { grem, p } = this.props\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          background: '#222',\n          color: '#fff',\n          paddingTop: grem * 2,\n          overflowY: 'auto',\n          fontSize: 16,\n          lineHeight: 1.5,\n        }}\n      >\n        <div\n          style={{\n            background: '#333',\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            padding: grem / 2,\n          }}\n        >\n          About\n          <button\n            onClick={() => {\n              this.props.toggleAbout(false)\n            }}\n            className=\"hover-555\"\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: grem * 2,\n              width: grem * 2,\n              padding: grem / 2,\n              textAlign: 'center',\n              cursor: 'pointer',\n              textDecoration: 'none',\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div\n          style={{\n            maxWidth: grem * 30,\n            margin: '0 auto',\n            padding: grem / 2,\n            color: '#fff',\n          }}\n        >\n          <Markdown>{about_text}</Markdown>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n","export let about_text = `\n# About UMAP explorer\n\nThis is an interactive visualization that uses the [UMAP algorithm](https://github.com/lmcinnes/umap) to cluster hand-drawn digits from the [MNIST dataset](http://yann.lecun.com/exdb/mnist/). I'm sharing it as an example of how to render tens of thousands of images mapped to data points using the [three.js](https://threejs.org/) library. The code is available [on github](https://github.com/GrantCuster/umap-explorer) and can be adapted or used as a reference for doing similar visualizations with different datasets or algorithms. If you do use it or have questions please let me know at [grantcuster@gmail.com](mailto:grantcuster+umap@gmail.com) or [on Twitter](https://twitter.com/grantcuster).\n\n## About UMAP\n\nThe UMAP algorithm is responsible for the clustering of the images. The coordinates for each data point in the visualization are from the [UMAP MNIST example notebook](https://github.com/lmcinnes/umap_paper_notebooks/blob/master/UMAP%20MNIST.ipynb). Check out [the UMAP guides and documentation](https://umap-learn.readthedocs.io/en/latest/) to learn more about how UMAP works.\n\n## About the visualization code\n\nThis code was developed as part of a prototype for [Cloudera Fast Forward Labs](https://www.cloudera.com/products/fast-forward-labs-research.html). I had worked through how to use three.js for 2D data visualization in a previous project. If you're interested in how to set-up the three.js camera and get it working with [d3-zoom](https://github.com/d3/d3-zoom) I recommend [the notebook I wrote about that project](https://beta.observablehq.com/@grantcuster/using-three-js-for-2d-data-visualization).\n\n## Rendering the images\n\nInstead of just the dots of my previous project, I wanted to render each data point in this one as the image itself. A lot of what you want to see when you look at a clustering algorithm is how it puts together its clusters. Displaying the images themselves (rather than showing one-at-a-time on hover) gives a much better view into how the algorithm is working. I knew a bit about how textures worked in three.js from the last project, and I had some experience with sprite sheets from trying to optimize website image loading. I had a vague idea putting the images together in a sprite sheet (in this context known as a [texture atlas](https://en.wikipedia.org/wiki/Texture_atlas)) and then cropping and offsetting could work to render all 70,000 MNIST images, but I didn't know what the real mechanics of that would look like.\n\nIt took me a while to get there, but the key turned out to be this [WestLangley answer](https://stackoverflow.com/questions/25335967/texture-atlas-offset-repeat-works-for-meshes-but-is-ignored-for-point-system-par/25372202#25372202) and the [accompanying jsfiddle](http://jsfiddle.net/myy7x4zd/10/), which shows how to combine the points geometry with a texture atlas to render different images across the different points. I used that example as the starting point for this visualization. I learned a lot more about uniforms, attributes, and shaders as I made tweaks to get the results I wanted, but that example is the core of the image rendering.\n\n### Generating the images\n\n![](../mnist_tile_solid_0.png)\n\n_A texture atlas of one chunk of the MNIST dataset._\n\nAnother big help in making this was [Douglas Duhaime's post on using three.js to visualize TSNE maps](https://douglasduhaime.com/posts/visualizing-tsne-maps-with-three-js.html). Finding Douglas's post and project reassured me that I was on the right path. It also provided lots of information about texture atlases. Including the info that for some devices, 2048x2048 is the largest size allowed.\n\nDouglas shows how to use ImageMagick to create texture atlases. For our project I wanted to generate them in python. The prototype will have several different datasets. My co-workers are already doing their machine learning stuff with those datasets in python, so if we code out a pipeline in python to generate both the embeddings for the visualization and the texture atlases we should be able to switch out different datasets relatively easily. We put together this visualization of the MNIST dataset to make sure that approach would work on a dataset we knew well (we didn't want to have to debug the visualization rendering and the dataset and models all at the same time). I included the [iPython notebook code for generating the images in the github repository](https://github.com/GrantCuster/umap-explorer). I'm new to python so it's not pretty, but it worked.\n\n### Gotchas: transparency, image size, and highlighting\n\nIn this visualization, the transparency of the digits comes from discarding color data below a threshold of 0.5. As far as I can tell, you can't do gradual transparency with this approach. You can see the effect of this when you're zoomed out – the darker pixels within the clusters are ones that were above the threshold but not pure white. I don't mind the effect so much here. I was excited I could get what transparency I did. But it might be more of an issue for other datasets. For many image datasets you wouldn't want transparency at all. I am curious how this visualization would feel with non-transparent images.\n\nI think for non-transparent images you might want to adjust the size of the sprites even more. That gets into one of the biggest caveats about using three.js (and specifically the points object) for this type of visualization. By default the image data point is the same size no matter your zoom level (it doesn't get bigger as you get closer as an object would in real life). This can be a benefit, it lets you see more of the local structure as you zoom in. But you probably don't want the points to stay exactly the same size. What you can do is adjust the size of the points as you zoom by setting the uniform. As I understand it, a uniform isn't very expensive to update so you can do it a bunch of times on zoom. For this visualization, I set my own custom zoom scaler using d3-scale, which enlarges the size of the points at certain specified intervals. If I had more time I would definitely dial in the feel of this a bit more, but I think I got a relatively functional version in.\n\nFor highlighting I again used an approach from my past project. Using three.js's raycaster functionality to determine which point the mouse is over. To create the enlarged hover sprite I actually use a different point object with very similar shader code. There's probably a cleaner way to do this but it works for now.\n\n### Things I'd like to see (let me know if you do them)\n\n- I'd love to see this approach applied to other datasets and algorithms. If I had the time I'd definitely do a T-SNE on MNIST version to compare with UMAP.\n- I'd love to see what you could do by switching aprite sheets for different zoom levels. If you used different resolution sprites for different zoom levels you might get better performance. It could also be interesting to switch to something more abstract (like a circle sprite) when you're zoomed out and then switch over to the images only when you're zoomed in enough that they're useful.\n- Different scaling of points on zoom. Like I said, I don't think I nailed this part. I'd love to see someone take a more rigorous approach to it.\n- Transitions between datasets or algorithms. [Kyle McDonald made some GIFs of transitioning between UMAP and T-SNE](https://twitter.com/kcimc/status/930348969275691008). The way the shaders are set-up, I can kind of make out how you could do this (switch the position attributes, interpolate with something like tween.js), and it has the potential to look really slick.\n- Port the visualization from three.js to [REGL.js](https://peterbeshai.com/beautifully-animate-points-with-webgl-and-regl.html).\n- Constraining zoom and pan so you can't scroll the visualization off-screen. I tried this a bit but ended up scoping it out of this version. If I cleaned up the code for wiring d3-zoom to three.js's camera this would probably be easier.\n- Make this a general framework for visualization. Easy, right? I think the core of this could be a really good approach for visualizing lots of datasets and how machine learning is viewing them. Making it friendly and handling all the edge cases would be a big undertaking though.\n\n### The code\n\nThe code is viewable [on github](https://github.com/GrantCuster/umap-explorer). Let me know if you have any questions and if you find it useful.\n\n– Grant`\n","import React, { Component } from 'react'\nimport Sidebar from './Sidebar'\nimport Projection from './Projection'\nimport About from './About'\nimport * as _ from 'lodash'\n\n// padding constructor\nfunction p(tb, lr) {\n  return `${tb}px ${lr}px`\n}\n\nlet color_array = [\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [204, 235, 197],\n]\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      hover_index: null,\n      show_about: null,\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.checkHash = this.checkHash.bind(this)\n    this.setSidebarCanvas = this.setSidebarCanvas.bind(this)\n    this.toggleAbout = this.toggleAbout.bind(this)\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n    let sidebar_height = this.sidebar_mount.offsetHeight\n    this.setState({ sidebar_height: sidebar_height })\n    if (this.sidebar_ctx) this.sidebar_ctx.imageSmoothingEnabled = false\n  }\n\n  setSidebarCanvas(canvas) {\n    let ctx = canvas.getContext('2d')\n    ctx.imageSmoothingEnabled = false\n    this.sidebar_ctx = ctx\n  }\n\n  toggleAbout(state) {\n    if (state === true) {\n      window.history.pushState(null, 'About UMAP Explorer', '#about')\n      this.setState({ show_about: true })\n    } else if (state === false) {\n      window.history.pushState(null, 'UMAP Explorer', window.location.pathname)\n      this.setState({ show_about: false })\n    }\n  }\n\n  setHoverIndex(hover_index) {\n    this.setState({ hover_index: hover_index })\n  }\n\n  componentWillMount() {\n    this.setSize()\n    this.checkHash()\n  }\n\n  checkHash() {\n    if (window.location.hash && window.location.hash === '#about') {\n      this.setState({ show_about: true })\n    } else {\n      this.setState({ show_about: false })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n    window.addEventListener('popstate', this.checkHash)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  render() {\n    let { mnist_embeddings, mnist_labels } = this.props\n    let { ww, wh, sidebar_height, hover_index, show_about } = this.state\n    let sidebar_ctx = this.sidebar_ctx\n\n    let line_height = 1.5\n\n    let sidebar_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      display: 'flex',\n      flexDirection: 'column',\n    }\n    let main_style = {\n      position: 'relative',\n      height: '100vh',\n      background: '#111',\n      overflow: 'hidden',\n    }\n\n    let sidebar_image_size, sidebar_orientation\n    let font_size = 16\n    if (ww < 800) {\n      font_size = 14\n      sidebar_style = {\n        ...sidebar_style,\n        flexDirection: 'row',\n        width: '100%',\n        top: 'auto',\n        height: 'auto',\n        bottom: 0,\n      }\n      main_style = { width: ww, height: wh - sidebar_height }\n      sidebar_image_size = font_size * line_height * 3\n      sidebar_orientation = 'horizontal'\n    } else if (ww < 800 + 600) {\n      let scaler = 200 + (300 - 200) * ((ww - 800) / 600)\n      font_size = 14 + 2 * ((ww - 800) / 600)\n      sidebar_style = {\n        ...sidebar_style,\n        width: scaler,\n      }\n      sidebar_image_size = sidebar_style.width\n      main_style = {\n        ...main_style,\n        width: ww - scaler,\n        left: scaler,\n        height: wh,\n      }\n      sidebar_orientation = 'vertical'\n    } else {\n      sidebar_style = {\n        ...sidebar_style,\n        width: 300,\n      }\n      main_style = {\n        ...main_style,\n        width: ww - 300,\n        left: 300,\n        height: wh,\n      }\n      sidebar_image_size = sidebar_style.width\n      sidebar_orientation = 'vertical'\n    }\n\n    let grem = font_size * line_height\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    }\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <Sidebar\n            sidebar_orientation={sidebar_orientation}\n            sidebar_image_size={sidebar_image_size}\n            grem={grem}\n            p={p}\n            color_array={color_array}\n            setSidebarCanvas={this.setSidebarCanvas}\n            hover_index={hover_index}\n            mnist_labels={mnist_labels}\n            toggleAbout={this.toggleAbout}\n          />\n        </div>\n        <div style={main_style}>\n          <Projection\n            width={main_style.width}\n            height={main_style.height}\n            mnist_embeddings={mnist_embeddings}\n            mnist_labels={mnist_labels}\n            color_array={color_array}\n            sidebar_ctx={sidebar_ctx}\n            sidebar_image_size={sidebar_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n          />\n        </div>\n        {show_about ? (\n          <About grem={grem} p={p} toggleAbout={this.toggleAbout} />\n        ) : null}\n      </div>\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading layout...</div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport Layout from './Layout'\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mnist_embeddings: null,\n      mnist_labels: null,\n    }\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings =>\n        this.setState({\n          mnist_embeddings: mnist_embeddings,\n        })\n      )\n    fetch(`${process.env.PUBLIC_URL}/mnist_labels.json`)\n      .then(response => response.json())\n      .then(mnist_labels =>\n        this.setState({\n          mnist_labels: mnist_labels,\n        })\n      )\n  }\n\n  render() {\n    return this.state.mnist_embeddings && this.state.mnist_labels ? (\n      <Layout {...this.state} />\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading data...</div>\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport './App.css'\nimport Data from './Data'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
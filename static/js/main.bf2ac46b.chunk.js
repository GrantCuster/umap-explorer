(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{27:function(e,t,n){e.exports=n(90)},32:function(e,t,n){},34:function(e,t,n){},90:function(e,t,n){"use strict";n.r(t);var i=n(0),a=n.n(i),o=n(25),s=n.n(o),r=(n(32),n(6)),h=n(7),l=n(9),c=n(8),d=n(10),u=(n(34),n(11)),m=n(1),g=function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(h.a)(t,[{key:"componentDidMount",value:function(){this.props.setSidebarCanvas(this.side_canvas),this.handleSelectAlgorithm=this.handleSelectAlgorithm.bind(this)}},{key:"handleSelectAlgorithm",value:function(e){var t=e.target.value;this.props.selectAlgorithm(t)}},{key:"render",value:function(){var e=this,t=this.props,n=t.sidebar_orientation,i=t.sidebar_image_size,o=t.grem,s=t.p,r=t.hover_index,h=t.mnist_labels,l=t.color_array,c=t.algorithm_options,d=t.algorithm_choice;return a.a.createElement("div",{style:{display:"flex",flexDirection:"column",justifyContent:"space-between",flexGrow:1}},a.a.createElement("div",null," ",a.a.createElement("div",{style:{padding:o/2,display:"flex",justifyContent:"space-between",alignItems:"center"}},a.a.createElement("div",null,"Algorithm:"),a.a.createElement("select",{onChange:this.handleSelectAlgorithm,value:c[d]},c.map(function(e,t){return a.a.createElement("option",{key:e,value:e},e)}))),a.a.createElement("div",{style:{display:"flex",flexDirection:"horizontal"===n?"row":"column"}},a.a.createElement("div",null,a.a.createElement("canvas",{ref:function(t){e.side_canvas=t},width:i,height:i})),a.a.createElement("div",{style:{flexGrow:1}},a.a.createElement("div",{style:{background:r?"rgb(".concat(l[h[r]].join(","),")"):"transparent",color:r?"#000":"#fff",padding:s(o/4,o/2),display:"flex",justifyContent:"space-between",transition:"all 0.1s linear"}},a.a.createElement("div",null,"Label:"),r?a.a.createElement("div",null,h[r]):null),a.a.createElement("div",{style:{padding:s(o/4,o/2),display:"flex",justifyContent:"space-between"}},"Index:",r?a.a.createElement("div",null,r):null)))),a.a.createElement("div",{style:{padding:o/2}},a.a.createElement("div",null,"An interactive UMAP visualization of the MNIST data set."," ",a.a.createElement("button",{onClick:function(){e.props.toggleAbout(!0)}},"About"))))}}]),t}(i.Component),p=n(16),f=n(17),b=n(2),v=n(4),w=n(5),y=n(14),_=Object(f.a)(Array(14)).map(function(e,t){return"".concat("/umap-explorer","/").concat("mnist_tile_solid_").concat(t,".png")}),k=_.map(function(e){var t=document.createElement("img");return t.src=e,t}),j=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(l.a)(this,Object(c.a)(t).call(this,e))).handleResize=function(e,t){n.camera.aspect=e/t,n.camera.updateProjectionMatrix(),n.renderer.setSize(e,t);var i=n.getScaleFromZ(n.camera.position.z),a=-n.camera.position.x*i+n.props.width/2,o=n.camera.position.y*i+n.props.height/2,s=w.f.translate(a,o).scale(i),r=w.d(n.mount);n.d3_zoom.transform(r,s)},n.state={},n.init=n.init.bind(Object(m.a)(Object(m.a)(n))),n.addPoints=n.addPoints.bind(Object(m.a)(Object(m.a)(n))),n.handleResize=n.handleResize.bind(Object(m.a)(Object(m.a)(n))),n.setUpCamera=n.setUpCamera.bind(Object(m.a)(Object(m.a)(n))),n.animate=n.animate.bind(Object(m.a)(Object(m.a)(n))),n.getScaleFromZ=n.getScaleFromZ.bind(Object(m.a)(Object(m.a)(n))),n.getZFromScale=n.getZFromScale.bind(Object(m.a)(Object(m.a)(n))),n.changeEmbeddings=n.changeEmbeddings.bind(Object(m.a)(Object(m.a)(n))),n}return Object(d.a)(t,e),Object(h.a)(t,[{key:"changeEmbeddings",value:function(e,t){for(var n=this,i=[],a=0;a<14;a++){var o=5329*a,s=5329*(a+1);13===a&&(s=74606),i.push([o,s])}for(var r=i.map(function(e){return n.props[n.props.algorithm_embedding_keys[t]].slice(e[0],e[1])}),h=function(e){for(var t=r[e],i=n.scene.children[0].children[e],a=t.length,o=i.geometry.attributes.position.array,s=new Float32Array(3*a),h=0,l=0,c=a;h<c;h++,l+=3){var d=t[h][0],u=t[h][1];s[l]=d,s[l+1]=u,s[l+2]=0}var m=new y.Tween(o).to(s,1e3).easing(y.Easing.Linear.None);m.onUpdate(function(){i.geometry.attributes.position=new b.a(o,3),i.geometry.attributes.position.needsUpdate=!0}),m.start()},l=0;l<14;l++)h(l)}},{key:"getZFromScale",value:function(e){var t=b.d.degToRad(this.camera.fov);return this.props.height/e/(2*Math.tan(t/2))}},{key:"getScaleFromZ",value:function(e){var t=b.d.degToRad(this.camera.fov),n=2*(Math.tan(t/2)*e);return this.props.height/n}},{key:"zoomHandler",value:function(){var e=w.a.transform,t=e.k,n=-(e.x-this.props.width/2)/t,i=(e.y-this.props.height/2)/t,a=this.getZFromScale(t);this.camera.position.set(n,i,a);for(var o=function(e){var t=w.c().domain([20,5]).range([14,28]).clamp(!0);w.c().domain([2,.1]).range([28,56]);return e>=5?t(e):28}(a),s=this.scene.children[0].children,r=0;r<s.length;r++)s[r].material.uniforms.size.value=o}},{key:"setUpCamera",value:function(){var e,t=this.props,n=t.width,i=t.height,a=t.mnist_embeddings,o=(this.camera.aspect,this.camera.fov),s=b.d.degToRad(o),r=a.map(function(e){return e[0]}),h=v.min(r),l=v.max(r),c=a.map(function(e){return e[1]}),d=v.min(c),u=v.max(c),m=v.max([h,l].map(function(e){return Math.abs(e)})),g=v.max([d,u].map(function(e){return Math.abs(e)})),p=1.25*(e=Math.max(m,g)/Math.tan(s/2));this.camera.far=p,this.camera.position.z=1.1*e,this.d3_zoom=w.e().scaleExtent([this.getScaleFromZ(p-1),this.getScaleFromZ(.1)]).on("zoom",this.zoomHandler.bind(this));var f=w.d(this.mount);this.view=f,f.call(this.d3_zoom);var y=this.getScaleFromZ(this.camera.position.z),_=w.f.translate(n/2,i/2).scale(y);this.d3_zoom.transform(f,_)}},{key:"addPoints",value:function(){for(var e=this.props,t=e.mnist_embeddings,n=e.mnist_labels,i=e.color_array,a=[],o=0;o<14;o++){var s=5329*o,r=5329*(o+1);13===o&&(r=74606),a.push([s,r])}var h=a.map(function(e){return t.slice(e[0],e[1])}),l=a.map(function(e){return n.slice(e[0],e[1])}),c=new b.k;this.textures=_.map(function(e){var t=c.load(e);return t.flipY=!1,t.magFilter=b.e,t});for(var d=new b.c,u=0;u<14;u++){for(var m=h[u],g=l[u],p=[],f=0;f<m.length;f++){var v=m[f],w=new b.m(v[0],v[1],0);p[f]=w}var y=new b.b,k=p.length,j=new Float32Array(3*k),x=new Float32Array(2*k),z=new Float32Array(3*k);y.addAttribute("position",new b.a(j,3)),y.addAttribute("offset",new b.a(x,2)),y.addAttribute("color",new b.a(z,3));for(var O=0,I=0,E=k;O<E;O++,I+=3){var A=m[O][0],S=m[O][1];j[I]=A,j[I+1]=S,j[I+2]=0}for(var M=0,C=0,T=k;M<T;M++,C+=2){var P=M%73*28/2048,F=28*Math.floor(M/73)/2048;x[C]=P,x[C+1]=F}for(var U=0,D=0,H=k;U<H;U++,D+=3){var N=i[g[U]];z[D]=N[0]/255,z[D+1]=N[1]/255,z[D+2]=N[2]/255}var L={texture:{value:this.textures[u]},repeat:{value:new b.l(1/73,1/73)},size:{value:28}},R=new b.j({uniforms:L,vertexShader:"\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }"}),W=new b.g(y,R);W.userData={sprite_index:u},d.add(W)}this.scene.add(d)}},{key:"addBlankHighlightPoints",value:function(){var e=new b.c;this.scene.add(e);var t=[new b.m(0,0,0)],n=new b.b,i=t.length,a=new Float32Array(3*i),o=new Float32Array(2*i);n.addAttribute("position",new b.a(a,3)),n.addAttribute("offset",new b.a(o,2));var s={texture:{value:this.textures[0]},repeat:{value:new b.l(1/73,1/73)},size:{value:56}},r=new b.j({uniforms:s,vertexShader:"\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          gl_FragColor = tex;\n        }"}),h=new b.g(n,r);h.frustumCulled=!1,this.scene.children[1].visible=!1,this.scene.children[1].add(h)}},{key:"highlightPoint",value:function(e,t,n){var i=this.props,a=i.algorithm_embedding_keys,o=i.algorithm_choice,s=this.scene.children[1].children[0],r=this.props[a[o]][n],h=[new b.m(r[0],r[1],0)],l=new Float32Array(2),c=t%73*28/2048,d=28*Math.floor(t/73)/2048;l[0]=c,l[1]=d,s.geometry.attributes.position.copyVector3sArray(h),s.geometry.attributes.position.needsUpdate=!0,s.geometry.attributes.offset.array=l,s.geometry.attributes.offset.needsUpdate=!0,s.material.uniforms.texture.value=this.textures[e]}},{key:"removeHighlights",value:function(){var e=this.scene.children[1],t=e.children;e.remove.apply(e,Object(f.a)(t))}},{key:"checkIntersects",value:function(e){var t=this.props,n=t.width,i=t.height,a=t.sidebar_ctx,o=t.sidebar_image_size;var s=function(e){var t=Object(p.a)(e,2),a=t[0],o=t[1];return new b.m(a/n*2-1,-o/i*2+1,1)}(e);this.raycaster.setFromCamera(s,this.camera),this.raycaster.params.Points.threshold=.25;var r=this.raycaster.intersectObjects(this.scene.children[0].children);if(r[0]){var h=function(e){return v.sortBy(e,"distanceToRay")}(r)[0],l=h.object.userData.sprite_index,c=h.index,d=5329*l+c;this.props.setHoverIndex(d),this.highlightPoint(l,c,d),this.scene.children[1].visible=!0,a.fillRect(0,0,o,o),a.drawImage(k[l],c%73*28,28*Math.floor(c/73),28,28,0,0,o,o)}else this.props.setHoverIndex(null),this.scene.children[1].visible=!1,a.fillRect(0,0,o,o)}},{key:"handleMouse",value:function(){var e=this,t=w.d(this.renderer.domElement);this.raycaster=new b.h,t.on("mousemove",function(){var n=w.b(t.node()),i=Object(p.a)(n,2),a=[i[0],i[1]];e.checkIntersects(a)})}},{key:"init",value:function(){var e=this.props,t=e.width,n=e.height;this.scene=new b.i;var i=t/n;this.camera=new b.f(75,i,.01,1e3),this.renderer=new b.n,this.renderer.setClearColor(1118481,1),this.renderer.setSize(t,n),this.mount.appendChild(this.renderer.domElement),this.addPoints(),this.addBlankHighlightPoints(),this.setUpCamera(),this.animate(),this.handleMouse()}},{key:"animate",value:function(){requestAnimationFrame(this.animate),y.update(),this.renderer.render(this.scene,this.camera)}},{key:"componentDidMount",value:function(){this.init()}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.width,i=t.height;n===e.width&&i===e.height||this.handleResize(n,i),e.algorithm_choice!==this.props.algorithm_choice&&this.changeEmbeddings(e.algorithm_choice,this.props.algorithm_choice)}},{key:"componentWillUnmount",value:function(){this.mount.removeChild(this.renderer.domElement)}},{key:"render",value:function(){var e=this,t=this.props,n=t.width,i=t.height;return a.a.createElement("div",{style:{width:n,height:i,overflow:"hidden"},ref:function(t){e.mount=t}})}}]),t}(i.Component),x=n(26),z=n.n(x),O=function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(h.a)(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.grem;t.p;return a.a.createElement("div",{style:{position:"fixed",left:0,top:0,right:0,bottom:0,background:"#222",color:"#fff",paddingTop:2*n,overflowY:"auto",fontSize:16,lineHeight:1.5}},a.a.createElement("div",{style:{background:"#333",position:"fixed",left:0,top:0,right:0,padding:n/2}},"About",a.a.createElement("button",{onClick:function(){e.props.toggleAbout(!1)},className:"hover-555",style:{position:"absolute",right:0,top:0,height:2*n,width:2*n,padding:n/2,textAlign:"center",cursor:"pointer",textDecoration:"none"}},"\xd7")),a.a.createElement("div",{style:{maxWidth:30*n,margin:"0 auto",padding:n/2,color:"#fff"}},a.a.createElement(z.a,null,"\n# About UMAP explorer\n\nThis is an interactive visualization that uses the [UMAP algorithm](https://github.com/lmcinnes/umap) to cluster hand-drawn digits from the [MNIST dataset](http://yann.lecun.com/exdb/mnist/). I'm sharing it as an example of how to render tens of thousands of images mapped to data points using the [three.js](https://threejs.org/) library. The code is available [on github](https://github.com/GrantCuster/umap-explorer) and can be adapted or used as a reference for doing similar visualizations with different datasets or algorithms. If you do use it or have questions please let me know at [grantcuster@gmail.com](mailto:grantcuster+umap@gmail.com) or [on Twitter](https://twitter.com/grantcuster).\n\n## Updates\n\n- 2019-01-21: Added T-SNE and UMAP `min_dist=0.8` algorithm options. `min_dist` setting based on this [Twitter exchange](https://twitter.com/kcimc/status/930149461078265856). Interpolation is done using [TWEEN.js](https://github.com/tweenjs/tween.js/) and updating the position attribute of the points.\n\n## About UMAP\n\nThe UMAP algorithm is responsible for the clustering of the images. The coordinates for each data point in the visualization are from the [UMAP MNIST example notebook](https://github.com/lmcinnes/umap_paper_notebooks/blob/master/UMAP%20MNIST.ipynb). Check out [the UMAP guides and documentation](https://umap-learn.readthedocs.io/en/latest/) to learn more about how UMAP works.\n\n## About the visualization code\n\nThis code was developed as part of a prototype for [Cloudera Fast Forward Labs](https://www.cloudera.com/products/fast-forward-labs-research.html). I had worked through how to use three.js for 2D data visualization in a previous project. If you're interested in how to set-up the three.js camera and get it working with [d3-zoom](https://github.com/d3/d3-zoom) I recommend [the notebook I wrote about that project](https://beta.observablehq.com/@grantcuster/using-three-js-for-2d-data-visualization).\n\n## Rendering the images\n\nInstead of just the dots of my previous project, I wanted to render each data point in this one as the image itself. A lot of what you want to see when you look at a clustering algorithm is how it puts together its clusters. Displaying the images themselves (rather than showing one-at-a-time on hover) gives a much better view into how the algorithm is working. I knew a bit about how textures worked in three.js from the last project, and I had some experience with sprite sheets from trying to optimize website image loading. I had a vague idea putting the images together in a sprite sheet (in this context known as a [texture atlas](https://en.wikipedia.org/wiki/Texture_atlas)) and then cropping and offsetting could work to render all 70,000 MNIST images, but I didn't know what the real mechanics of that would look like.\n\nIt took me a while to get there, but the key turned out to be this [WestLangley answer](https://stackoverflow.com/questions/25335967/texture-atlas-offset-repeat-works-for-meshes-but-is-ignored-for-point-system-par/25372202#25372202) and the [accompanying jsfiddle](http://jsfiddle.net/myy7x4zd/10/), which shows how to combine the points geometry with a texture atlas to render different images across the different points. I used that example as the starting point for this visualization. I learned a lot more about uniforms, attributes, and shaders as I made tweaks to get the results I wanted, but that example is the core of the image rendering.\n\n### Generating the images\n\n![](./mnist_tile_solid_0.png)\n\n_A texture atlas of one chunk of the MNIST dataset._\n\nAnother big help in making this was [Douglas Duhaime's post on using three.js to visualize TSNE maps](https://douglasduhaime.com/posts/visualizing-tsne-maps-with-three-js.html). Finding Douglas's post and project reassured me that I was on the right path. It also provided lots of information about texture atlases. Including the info that for some devices, 2048x2048 is the largest size allowed.\n\nDouglas shows how to use ImageMagick to create texture atlases. For our project I wanted to generate them in python. The prototype will have several different datasets. My co-workers are already doing their machine learning stuff with those datasets in python, so if we code out a pipeline in python to generate both the embeddings for the visualization and the texture atlases we should be able to switch out different datasets relatively easily. We put together this visualization of the MNIST dataset to make sure that approach would work on a dataset we knew well (we didn't want to have to debug the visualization rendering and the dataset and models all at the same time). I included the [iPython notebook code for generating the images in the github repository](https://github.com/GrantCuster/umap-explorer). I'm new to python so it's not pretty, but it worked.\n\n### Gotchas: transparency, image size, and highlighting\n\nIn this visualization, the transparency of the digits comes from discarding color data below a threshold of 0.5. As far as I can tell, you can't do gradual transparency with this approach. You can see the effect of this when you're zoomed out \u2013 the darker pixels within the clusters are ones that were above the threshold but not pure white. I don't mind the effect so much here. I was excited I could get what transparency I did. But it might be more of an issue for other datasets. For many image datasets you wouldn't want transparency at all. I am curious how this visualization would feel with non-transparent images.\n\nI think for non-transparent images you might want to adjust the size of the sprites even more. That gets into one of the biggest caveats about using three.js (and specifically the points object) for this type of visualization. By default the image data point is the same size no matter your zoom level (it doesn't get bigger as you get closer as an object would in real life). This can be a benefit, it lets you see more of the local structure as you zoom in. But you probably don't want the points to stay exactly the same size. What you can do is adjust the size of the points as you zoom by setting the uniform. As I understand it, a uniform isn't very expensive to update so you can do it a bunch of times on zoom. For this visualization, I set my own custom zoom scaler using d3-scale, which enlarges the size of the points at certain specified intervals. If I had more time I would definitely dial in the feel of this a bit more, but I think I got a relatively functional version in.\n\nFor highlighting I again used an approach from my past project. Using three.js's raycaster functionality to determine which point the mouse is over. To create the enlarged hover sprite I actually use a different point object with very similar shader code. There's probably a cleaner way to do this but it works for now.\n\n### Things I'd like to see (let me know if you do them)\n\n- I'd love to see what you could do by switching aprite sheets for different zoom levels. If you used different resolution sprites for different zoom levels you might get better performance. It could also be interesting to switch to something more abstract (like a circle sprite) when you're zoomed out and then switch over to the images only when you're zoomed in enough that they're useful.\n- Different scaling of points on zoom. Like I said, I don't think I nailed this part. I'd love to see someone take a more rigorous approach to it.\n- (DONE 2019-01-21) Transitions between algorithms. [Kyle McDonald made some GIFs of transitioning between UMAP and T-SNE](https://twitter.com/kcimc/status/930348969275691008). The way the shaders are set-up, I can kind of make out how you could do this (switch the position attributes, interpolate with something like tween.js), and it has the potential to look really slick.\n- Try it on the fashion MNIST dataset. [UMAP example here.](https://umap-learn.readthedocs.io/en/latest/supervised.html)\n- Port the visualization from three.js to [REGL.js](https://peterbeshai.com/beautifully-animate-points-with-webgl-and-regl.html).\n- Constraining zoom and pan so you can't scroll the visualization off-screen. I tried this a bit but ended up scoping it out of this version. If I cleaned up the code for wiring d3-zoom to three.js's camera this would probably be easier.\n- Make this a general framework for visualization. Easy, right? I think the core of this could be a really good approach for visualizing lots of datasets and how machine learning is viewing them. Making it friendly and handling all the edge cases would be a big undertaking though.\n\n### The code\n\nThe code is viewable [on github](https://github.com/GrantCuster/umap-explorer). Let me know if you have any questions and if you find it useful.\n\n\u2013 Grant")))}}]),t}(i.Component);function I(e,t){return"".concat(e,"px ").concat(t,"px")}var E=[[141,211,199],[255,255,179],[190,186,218],[251,128,114],[128,177,211],[253,180,98],[179,222,105],[252,205,229],[188,128,189],[204,235,197]],A=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(l.a)(this,Object(c.a)(t).call(this,e))).state={ww:null,wh:null,sidebar_height:null,hover_index:null,show_about:null,algorithm_choice:0},n.sidebar_ctx=null,n.setSize=v.debounce(n.setSize.bind(Object(m.a)(Object(m.a)(n))),200),n.checkHash=n.checkHash.bind(Object(m.a)(Object(m.a)(n))),n.setSidebarCanvas=n.setSidebarCanvas.bind(Object(m.a)(Object(m.a)(n))),n.toggleAbout=n.toggleAbout.bind(Object(m.a)(Object(m.a)(n))),n.selectAlgorithm=n.selectAlgorithm.bind(Object(m.a)(Object(m.a)(n))),n}return Object(d.a)(t,e),Object(h.a)(t,[{key:"selectAlgorithm",value:function(e){var t=this.props.algorithm_options.indexOf(e);this.setState({algorithm_choice:t})}},{key:"setSize",value:function(){this.setState({ww:window.innerWidth,wh:window.innerHeight});var e=this.sidebar_mount.offsetHeight;this.setState({sidebar_height:e}),this.sidebar_ctx&&(this.sidebar_ctx.imageSmoothingEnabled=!1)}},{key:"setSidebarCanvas",value:function(e){var t=e.getContext("2d");t.imageSmoothingEnabled=!1,this.sidebar_ctx=t}},{key:"toggleAbout",value:function(e){!0===e?(window.history.pushState(null,"About UMAP Explorer","#about"),this.setState({show_about:!0})):!1===e&&(window.history.pushState(null,"UMAP Explorer",window.location.pathname),this.setState({show_about:!1}))}},{key:"setHoverIndex",value:function(e){this.setState({hover_index:e})}},{key:"componentWillMount",value:function(){this.setSize(),this.checkHash()}},{key:"checkHash",value:function(){window.location.hash&&"#about"===window.location.hash?this.setState({show_about:!0}):this.setState({show_about:!1})}},{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setSize),window.addEventListener("popstate",this.checkHash)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setSize)}},{key:"render",value:function(){var e,t,n=this,i=this.props,o=i.mnist_embeddings,s=i.tsne_mnist_embeddings,r=i.md08_umap_mnist_embeddings,h=i.mnist_labels,l=i.algorithm_options,c=i.algorithm_embedding_keys,d=this.state,m=d.ww,p=d.wh,f=d.sidebar_height,b=d.hover_index,v=d.show_about,w=d.algorithm_choice,y=this.sidebar_ctx,_={position:"absolute",left:0,top:0,height:"100vh",overflow:"auto",background:"#222",display:"flex",flexDirection:"column"},k={position:"relative",height:"100vh",background:"#111",overflow:"hidden"},x=16;if(m<800)x=14,_=Object(u.a)({},_,{flexDirection:"row",width:"100%",top:"auto",height:"auto",bottom:0}),k={width:m,height:p-f},e=1.5*x*3,t="horizontal";else if(m<1400){var z=200+(m-800)/600*100;x=14+(m-800)/600*2,e=(_=Object(u.a)({},_,{width:z})).width,k=Object(u.a)({},k,{width:m-z,left:z,height:p}),t="vertical"}else _=Object(u.a)({},_,{width:300}),k=Object(u.a)({},k,{width:m-300,left:300,height:p}),e=_.width,t="vertical";var A=1.5*x,S={fontSize:x,lineHeight:1.5};return null!==m?a.a.createElement("div",{style:S},a.a.createElement("div",{style:_,ref:function(e){n.sidebar_mount=e}},a.a.createElement(g,{sidebar_orientation:t,sidebar_image_size:e,grem:A,p:I,color_array:E,setSidebarCanvas:this.setSidebarCanvas,hover_index:b,mnist_labels:h,toggleAbout:this.toggleAbout,algorithm_options:l,algorithm_choice:w,selectAlgorithm:this.selectAlgorithm})),a.a.createElement("div",{style:k},a.a.createElement(j,{width:k.width,height:k.height,mnist_embeddings:o,tsne_mnist_embeddings:s,md08_umap_mnist_embeddings:r,mnist_labels:h,color_array:E,sidebar_ctx:y,sidebar_image_size:e,setHoverIndex:this.setHoverIndex.bind(this),algorithm_embedding_keys:c,algorithm_choice:w})),v?a.a.createElement(O,{grem:A,p:I,toggleAbout:this.toggleAbout}):null):a.a.createElement("div",{style:{padding:"1rem"}},"Loading layout...")}}]),t}(i.Component),S=["UMAP","T-SNE","UMAP min_dist=0.8"],M=["mnist_embeddings","tsne_mnist_embeddings","md08_umap_mnist_embeddings"],C=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(l.a)(this,Object(c.a)(t).call(this,e))).state={mnist_embeddings:null,mnist_labels:null,md08_umap_mnist_embeddings:null},n}return Object(d.a)(t,e),Object(h.a)(t,[{key:"scaleEmbeddings",value:function(e){var t=e.map(function(e){return Math.abs(e[0])}),n=e.map(function(e){return Math.abs(e[1])}),i=v.max(t),a=v.max(n),o=Math.max(i,a),s=w.c().domain([-o,o]).range([-20,20]);return e.map(function(e){return[s(e[0]),s(e[1])]})}},{key:"componentDidMount",value:function(){var e=this;fetch("".concat("/umap-explorer","/mnist_embeddings.json")).then(function(e){return e.json()}).then(function(t){var n=e.scaleEmbeddings(t);e.setState({mnist_embeddings:n})}),fetch("".concat("/umap-explorer","/md08_umap_mnist_embeddings.json")).then(function(e){return e.json()}).then(function(t){var n=e.scaleEmbeddings(t);console.log("got em"),e.setState({md08_umap_mnist_embeddings:n})}),fetch("".concat("/umap-explorer","/tsne_mnist_embeddings.json")).then(function(e){return e.json()}).then(function(t){var n=e.scaleEmbeddings(t);e.setState({tsne_mnist_embeddings:n})}),fetch("".concat("/umap-explorer","/mnist_labels.json")).then(function(e){return e.json()}).then(function(t){return e.setState({mnist_labels:t})})}},{key:"render",value:function(){return console.log(this.state),this.state.mnist_embeddings&&this.state.mnist_labels?a.a.createElement(A,Object.assign({},this.state,{algorithm_options:S,algorithm_embedding_keys:M})):a.a.createElement("div",{style:{padding:"1rem"}},"Loading data...")}}]),t}(i.Component),T=function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(h.a)(t,[{key:"render",value:function(){return a.a.createElement(C,null)}}]),t}(i.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(a.a.createElement(T,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[27,2,1]]]);
//# sourceMappingURL=main.bf2ac46b.chunk.js.map